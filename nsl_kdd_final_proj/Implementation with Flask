IMPLEMENTATION WITH GUI

The GUI implementation of the hybrid model is done using html, css, bootstrap, flask technologies with python as major language. Trained model is saved and used to predict new connections which are tuples of dataset held for validation. 
5.1 Technologies
Html: The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. HTML can embed programs written in a scripting language such as JavaScript, which affects the behavior and content of web pages. Inclusion of CSS defines the look and layout of content. Web browsers receive HTML documents from a web server or from local storage and render the documents into multimedia web pages. HTML describes the structure of a web page semantically and originally included cues for the appearance of the document.

CSS: Cascading Style Sheets (CSS) is a style sheet language used for describing the presentation of a document written in a markup language such as HTML. CSS is designed to enable the separation of presentation and content, including layout, colors, and fonts. This separation can improve content accessibility, provide more flexibility and control in the specification of presentation characteristics, enable multiple web pages to share formatting by specifying the relevant CSS in a separate .css file which reduces complexity and repetition in the structural content as well as enabling the .css file to be cached to improve the page load speed between the pages that share the file and its formatting.

Bootstrap:  Bootstrap is a free and open-source CSS framework directed at responsive, mobile-first front-end web development. It contains CSS- and (optionally) JavaScript-based design templates for typography, forms, buttons, navigation, and other interface components. The primary purpose of adding it to a web project is to apply Bootstrap's choices of color, size, font and layout to that project.
Flask:  Flask is a micro web framework written in Python. It is classified as a microframework because it does not require particular tools or libraries. Its features includes development server and debugger, integrated support for unit testing, RESTful request dispatching, uses Jinja templating, support for secure cookies (client side sessions), 100% WSGI 1.0 compliant, Unicode-based, extensive documentation, Google App Engine compatibility, extensions available to enhance features desired.

Implementation
The major sections include:
•	Data folder : It contains dataset for testing purpose. 
•	Pickle folder: It contains trained model saved in the pickle format.
•	Static folder: It contains CSS file, images and bootstrap framework. 
•	Templates folder: HTML templates (index.html and explore.html) is contained. 
•	app.py file: It is an app object, which is an instance of the Flask object. It will act as the central configuration object for the entire application. It is used to set up pieces of the application required for extended functionality.
•	model.py file: Saved model is loaded. 
•	test.py file: It contains logic for testing the dataset whose results are displayed in explore.html 

Virtual environment is setup for the project which includes necessary libraries and packages. 
The algorithm of the finalized hybrid-model training steps and functionalities implemented are as follows:
hybrid_model.ipynb
import libraries and packages
initialize column header of dataset
data = read dataset
extract column names of numerical datatype
extract categorical data columns
perform correlation matrix of the data
extract upper triangular matrix of correlation matrix
to_drop = loop upper triangular matrix for columns with correlation> 0.95
drop columns from data in to_drop
drop service column
predictors = independent columns of data
target = dependent/ target column
load preprocessing.OneHotEncoder()
apply fit and transform on categorical data columns’
rename the labels of onehotencoded array
concatenate to predictors
perform train test split
perform standardization on train(fit_transform) and test(transform) set
ensemble = initialize VotingClassifier with voting = hard
train ensemble with x_train, y_train
save the model in pickle format
save standard scaler in pickle format

app.py  
import numpy
import pandas
import model.py and test.py
from flask import Flask, request, jsonify, render_template, redirect, send_file
initialise variables
app = create instance of flask

@app.route(‘/’) -decorate the initial route
def home():
	return index.html

@app.route(‘/predict’)-decorate the predict route
def predict():
get the form input string
split the string into features array
pop the features that were removed with correlation <0.95
convert the string input features into respective datatype
// initialize protocol_array, flag_array for onehotencoding
protocol_array = protocol_onehot(variable)
flag_array = flag_onehot(variable)
concatenate arrays with changed datatype and respective onehot encoded matrix
apply standardisation
predict 
if (output ==’anomaly’)
	res = ‘The connection is Malicious’
else:
	res =’The connection is normal’
return index.html with res

def protocol_onehot(key):
define dictionary of protocol type and corresponding sparse matrix
if key in dictionary:
	return matrix

def flag_onehot(flag):
define dictionary of flag and corresponding sparse matrix
if flag in dictionary:
	return matrix

@app.route(‘/explore’)-decorate the explore route
def explore():
	return render explore.html

@app.route(‘/back’)-decorate the back route
def back():
	return render index.html

@app.route(‘/test’)-decorate the test route
def test():
	test.score = score_test()
	return render explore.html with test.score

@app.route(‘/figure’)-decorate the figure route
def figure():
	val = display_confusion()
            if val ==1:
		return render explore.html with score and confusion matrix image

@app.route(‘/report’)-decorate the results route
def report():
	cr =display_report()
	if cr ==1:
return render explore.html with score, confusion matrix  and classification report image

if __name__ == “__main__”:
	run app

model.py
import pickle
sc = load saved standard scaler
model = load trained hybrid model
print “model ready”

test.py:
import sys
import sys 
import numpy as np 
import pandas as pd  
import matplotlib.pyplot as plt
import seaborn as sns  
from sklearn import preprocessing
from sklearn.model_selection import train_test_split , KFold
from sklearn. preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report                              
from sklearn.metrics import confusion_matrix 
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import VotingClassifier
from sklearn import model_selection
from sklearn import metrics 
import pickle
sc = load saved standard scaler
model = load trained hybrid model
initialise column headers
read x_test.csv
read y_test.csv
y_preds = predict(x_test)

def score_test():
	score = score for x_test, y_test
	return score

def display_confusion():
initialize plt.figure()
get confusion matrix for y_test, y_preds
draw plot by initialzing sns.heatmap
set labels, title, ticklabels
save the plot
return 1

def display_report():
initialize plt.figure()
get classification report for y_test, y_preds
draw plot by initialzing sns.heatmap
save the plot
return 1
